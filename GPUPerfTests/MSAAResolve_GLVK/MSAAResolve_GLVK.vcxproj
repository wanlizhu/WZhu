<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" ToolsVersion="Current" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <ItemGroup Label="ProjectConfigurations">
    <ProjectConfiguration Include="Debug|ARM64">
      <Configuration>Debug</Configuration>
      <Platform>ARM64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|ARM64">
      <Configuration>Release</Configuration>
      <Platform>ARM64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Debug|x64">
      <Configuration>Debug</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|x64">
      <Configuration>Release</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
  </ItemGroup>
  <PropertyGroup Label="Globals">
    <ProjectGuid>{4cd537f9-26e1-4f7f-9bc6-b3cb6acb3df2}</ProjectGuid>
    <Keyword>Linux</Keyword>
    <RootNamespace>MSAAResolve_GLVK</RootNamespace>
    <MinimumVisualStudioVersion>15.0</MinimumVisualStudioVersion>
    <ApplicationType>Linux</ApplicationType>
    <ApplicationTypeRevision>1.0</ApplicationTypeRevision>
    <TargetLinuxPlatform>Generic</TargetLinuxPlatform>
    <LinuxProjectType>{D51BCBC9-82E9-4017-911E-C93873C4EA2B}</LinuxProjectType>
    <ProjectName>MSAAResolve_GLVK</ProjectName>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="Configuration">
    <UseDebugLibraries>true</UseDebugLibraries>
    <PlatformToolset>Remote_GCC_1_0</PlatformToolset>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
    <UseDebugLibraries>false</UseDebugLibraries>
    <PlatformToolset>Remote_GCC_1_0</PlatformToolset>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|ARM64'" Label="Configuration">
    <UseDebugLibraries>false</UseDebugLibraries>
    <PlatformToolset>Remote_GCC_1_0</PlatformToolset>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|ARM64'" Label="Configuration">
    <UseDebugLibraries>true</UseDebugLibraries>
    <PlatformToolset>Remote_GCC_1_0</PlatformToolset>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
  <ImportGroup Label="ExtensionSettings" />
  <ImportGroup Label="Shared" />
  <ImportGroup Label="PropertySheets" />
  <PropertyGroup Label="UserMacros" />
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
    <OutDir>$(SolutionDir)_out\Linux-$(Platform)-$(Configuration)\</OutDir>
    <IntDir>$(SolutionDir)_out\Linux-$(Platform)-$(Configuration)\_int\</IntDir>
    <TargetExt />
    <RemoteCCompileToolExe>gcc</RemoteCCompileToolExe>
    <EnableIncrementalBuild>WithNinja</EnableIncrementalBuild>
    <RemoteIntRelDir>$(RemoteProjectRelDir)/../_out/Linux-$(Platform)-$(Configuration)/_int</RemoteIntRelDir>
    <RemoteOutRelDir>$(RemoteProjectRelDir)/../_out/Linux-$(Platform)-$(Configuration)</RemoteOutRelDir>
    <RemoteDeployDir>$(RemoteRootDir)/$(ProjectName)</RemoteDeployDir>
    <AdditionalSourcesToCopyMapping>
    </AdditionalSourcesToCopyMapping>
    <LocalRemoteCopySources>true</LocalRemoteCopySources>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <OutDir>$(SolutionDir)_out\Linux-$(Platform)-$(Configuration)\</OutDir>
    <IntDir>$(SolutionDir)_out\Linux-$(Platform)-$(Configuration)\_int\</IntDir>
    <TargetExt />
    <RemoteCCompileToolExe>gcc</RemoteCCompileToolExe>
    <EnableIncrementalBuild>WithNinja</EnableIncrementalBuild>
    <RemoteIntRelDir>$(RemoteProjectRelDir)/../_out/Linux-$(Platform)-$(Configuration)/_int</RemoteIntRelDir>
    <RemoteOutRelDir>$(RemoteProjectRelDir)/../_out/Linux-$(Platform)-$(Configuration)</RemoteOutRelDir>
    <RemoteDeployDir>$(RemoteRootDir)/$(ProjectName)</RemoteDeployDir>
    <AdditionalSourcesToCopyMapping>
    </AdditionalSourcesToCopyMapping>
    <LocalRemoteCopySources>true</LocalRemoteCopySources>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|ARM64'">
    <OutDir>$(SolutionDir)_out\Linux-$(Platform)-$(Configuration)\</OutDir>
    <IntDir>$(SolutionDir)_out\Linux-$(Platform)-$(Configuration)\_int\</IntDir>
    <TargetExt />
    <RemoteCCompileToolExe>gcc</RemoteCCompileToolExe>
    <EnableIncrementalBuild>WithNinja</EnableIncrementalBuild>
    <RemoteIntRelDir>$(RemoteProjectRelDir)/../_out/Linux-$(Platform)-$(Configuration)/_int</RemoteIntRelDir>
    <RemoteOutRelDir>$(RemoteProjectRelDir)/../_out/Linux-$(Platform)-$(Configuration)</RemoteOutRelDir>
    <RemoteDeployDir>$(RemoteRootDir)/$(ProjectName)</RemoteDeployDir>
    <AdditionalSourcesToCopyMapping>
    </AdditionalSourcesToCopyMapping>
    <LocalRemoteCopySources>true</LocalRemoteCopySources>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|ARM64'">
    <OutDir>$(SolutionDir)_out\Linux-$(Platform)-$(Configuration)\</OutDir>
    <IntDir>$(SolutionDir)_out\Linux-$(Platform)-$(Configuration)\_int\</IntDir>
    <TargetExt />
    <RemoteCCompileToolExe>gcc</RemoteCCompileToolExe>
    <EnableIncrementalBuild>WithNinja</EnableIncrementalBuild>
    <RemoteIntRelDir>$(RemoteProjectRelDir)/../_out/Linux-$(Platform)-$(Configuration)/_int</RemoteIntRelDir>
    <RemoteOutRelDir>$(RemoteProjectRelDir)/../_out/Linux-$(Platform)-$(Configuration)</RemoteOutRelDir>
    <RemoteDeployDir>$(RemoteRootDir)/$(ProjectName)</RemoteDeployDir>
    <AdditionalSourcesToCopyMapping>
    </AdditionalSourcesToCopyMapping>
    <LocalRemoteCopySources>true</LocalRemoteCopySources>
  </PropertyGroup>
  <ItemGroup>
    <ClCompile Include="main.cpp" />
    <ClCompile Include="MSAAResolve_GL.cpp" />
    <ClCompile Include="MSAAResolve_VK.cpp" />
  </ItemGroup>
  <ItemGroup>
    <ClInclude Include="glad\egl.h" />
    <ClInclude Include="glad\gl.h" />
    <ClInclude Include="glad\glx.h" />
    <ClInclude Include="glad\wgl.h" />
    <ClInclude Include="incbin.h" />
    <ClInclude Include="MSAAResolve_GLVK.h" />
  </ItemGroup>
  <ItemGroup>
    <None Include="fragment-shader.glsl" />
    <None Include="vertex-shader.glsl">
      <FileType>Document</FileType>
    </None>
  </ItemGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|ARM64'">
    <ClCompile>
      <AdditionalIncludeDirectories>$(projectDir);%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <CppLanguageStandard>c++17</CppLanguageStandard>
    </ClCompile>
    <Link>
      <AdditionalDependencies>-ldl;-lX11;-lGL;-lvulkan;-lglfw;%(AdditionalDependencies)</AdditionalDependencies>
      <AdditionalLibraryDirectories>%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
    </Link>
    <RemotePreBuildEvent>
      <Command>echo "Check package dependencies"
for pkg in build-essential libglfw3-dev libgl1-mesa-dev mesa-common-dev libglu1-mesa-dev glslang-tools vulkan-validationlayers vulkan-tools; do \
    dpkg -s $pkg &amp;&gt;/dev/null || sudo apt install -y $pkg
done

echo "Compile GLSL to SPIR-V shaders"
cd $(RemoteRootDir)/$(ProjectName)
rm -f *.glsl.spv
glslangValidator -V --auto-map-locations --auto-map-bindings -e main -S vert vertex-shader.glsl -o vertex-shader.glsl.spv
glslangValidator -V --auto-map-locations --auto-map-bindings -e main -S frag fragment-shader.glsl -o fragment-shader.glsl.spv
</Command>
      <Message>Install package dependencies and compile SPIR-V shaders</Message>
    </RemotePreBuildEvent>
    <CustomBuildStep>
      <Message />
    </CustomBuildStep>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|ARM64'">
    <ClCompile>
      <AdditionalIncludeDirectories>$(projectDir);%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <CppLanguageStandard>c++17</CppLanguageStandard>
    </ClCompile>
    <Link>
      <AdditionalDependencies>-ldl;-lX11;-lGL;-lvulkan;-lglfw;%(AdditionalDependencies)</AdditionalDependencies>
      <AdditionalLibraryDirectories>%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
    </Link>
    <RemotePreBuildEvent>
      <Command>echo "Check package dependencies"
for pkg in build-essential libglfw3-dev libgl1-mesa-dev mesa-common-dev libglu1-mesa-dev glslang-tools vulkan-validationlayers vulkan-tools; do \
    dpkg -s $pkg &amp;&gt;/dev/null || sudo apt install -y $pkg
done

echo "Compile GLSL to SPIR-V shaders"
cd $(RemoteRootDir)/$(ProjectName)
rm -f *.glsl.spv
glslangValidator -V --auto-map-locations --auto-map-bindings -e main -S vert vertex-shader.glsl -o vertex-shader.glsl.spv
glslangValidator -V --auto-map-locations --auto-map-bindings -e main -S frag fragment-shader.glsl -o fragment-shader.glsl.spv
</Command>
      <Message>Install package dependencies and compile SPIR-V shaders</Message>
    </RemotePreBuildEvent>
    <CustomBuildStep>
      <Message />
    </CustomBuildStep>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
    <ClCompile>
      <AdditionalIncludeDirectories>$(projectDir);%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <CppLanguageStandard>c++17</CppLanguageStandard>
    </ClCompile>
    <Link>
      <AdditionalDependencies>-ldl;-lX11;-lGL;-lvulkan;-lglfw;%(AdditionalDependencies)</AdditionalDependencies>
      <AdditionalLibraryDirectories>%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
    </Link>
    <RemotePreBuildEvent>
      <Command>echo "Check package dependencies"
for pkg in build-essential libglfw3-dev libgl1-mesa-dev mesa-common-dev libglu1-mesa-dev glslang-tools vulkan-validationlayers vulkan-tools; do \
    dpkg -s $pkg &amp;&gt;/dev/null || sudo apt install -y $pkg
done

echo "Compile GLSL to SPIR-V shaders"
cd $(RemoteRootDir)/$(ProjectName)
rm -f *.glsl.spv
glslangValidator -V --auto-map-locations --auto-map-bindings -e main -S vert vertex-shader.glsl -o vertex-shader.glsl.spv
glslangValidator -V --auto-map-locations --auto-map-bindings -e main -S frag fragment-shader.glsl -o fragment-shader.glsl.spv
</Command>
      <Message>Install package dependencies and compile SPIR-V shaders</Message>
    </RemotePreBuildEvent>
    <CustomBuildStep>
      <Message />
    </CustomBuildStep>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <ClCompile>
      <AdditionalIncludeDirectories>$(projectDir);%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <CppLanguageStandard>c++17</CppLanguageStandard>
    </ClCompile>
    <Link>
      <AdditionalDependencies>-ldl;-lX11;-lGL;-lvulkan;-lglfw;%(AdditionalDependencies)</AdditionalDependencies>
      <AdditionalLibraryDirectories>%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
    </Link>
    <RemotePreBuildEvent>
      <Command>echo "Check package dependencies"
for pkg in build-essential libglfw3-dev libgl1-mesa-dev mesa-common-dev libglu1-mesa-dev glslang-tools vulkan-validationlayers vulkan-tools; do \
    dpkg -s $pkg &amp;&gt;/dev/null || sudo apt install -y $pkg
done

echo "Compile GLSL to SPIR-V shaders"
cd $(RemoteRootDir)/$(ProjectName)
rm -f *.glsl.spv
glslangValidator -V --auto-map-locations --auto-map-bindings -e main -S vert vertex-shader.glsl -o vertex-shader.glsl.spv
glslangValidator -V --auto-map-locations --auto-map-bindings -e main -S frag fragment-shader.glsl -o fragment-shader.glsl.spv
</Command>
      <Message>Install package dependencies and compile SPIR-V shaders</Message>
    </RemotePreBuildEvent>
    <CustomBuildStep>
      <Message />
    </CustomBuildStep>
  </ItemDefinitionGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
  <ImportGroup Label="ExtensionTargets" />
</Project>